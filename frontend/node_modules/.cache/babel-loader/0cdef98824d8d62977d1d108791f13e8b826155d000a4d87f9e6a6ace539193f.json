{"ast":null,"code":"//import { useQuery } from '@tanstack/react-query';\nimport { getPlayerGameDataExample } from \"../../static_data/StatistshipData\";\nimport { getGamesStats } from \"../../utils/calculators/getGamesStats\";\n// ad params for filtering the games : opponents, specific champ, etc.\n\nfunction usePagePlayerDetails(options = {}) {\n  const {\n    playerId,\n    PlayerTeam\n  } = options;\n  const gameData = getPlayerGameDataExample(); //TODO: replace with real API call\n\n  const calculatedStats = getGamesStats(gameData, playerId || 0, PlayerTeam || \"Riot\");\n  console.log(\"--HOOK-- calculatedStats:\", calculatedStats);\n  return {\n    playerStats: calculatedStats,\n    gameCount: gameData.length\n  };\n}\nexport default usePagePlayerDetails;\n/*  type Filters = {\r\n    opponent?: string;\r\n    champion?: string;\r\n    competition?: string;\r\n  };\r\n\r\n  type State = {\r\n    filters: Filters;\r\n    filteredGames: Game[];\r\n    winrate: number;\r\n  };\r\n  type Action =\r\n    | { type: \"SET_GAMES\"; payload: Game[] }\r\n    | { type: \"SET_FILTERS\"; payload: Filters };\r\n*/","map":{"version":3,"names":["getPlayerGameDataExample","getGamesStats","usePagePlayerDetails","options","playerId","PlayerTeam","gameData","calculatedStats","console","log","playerStats","gameCount","length"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/pages/statistships/usePagePlayerDetails.ts"],"sourcesContent":["//import { useQuery } from '@tanstack/react-query';\r\nimport { getPlayerGameDataExample } from \"../../static_data/StatistshipData\";\r\nimport { Game } from \"../../types/Game\";\r\nimport { PlayerGameStats } from \"../../types/PlayerGameStats\";\r\nimport { getGamesStats } from \"../../utils/calculators/getGamesStats\";\r\n\r\ninterface usePagePlayerDetailsProps {\r\n  playerId?: number;\r\n  PlayerTeam?: string; // position in the game, e.g., 0 for top, 1 for jungle, etc.\r\n  event?: string;\r\n}\r\n// ad params for filtering the games : opponents, specific champ, etc.\r\n\r\nfunction usePagePlayerDetails(\r\n  options: Partial<usePagePlayerDetailsProps> = {}\r\n): {\r\n  playerStats: PlayerGameStats;\r\n  gameCount: number;\r\n} {\r\n  const { playerId, PlayerTeam } = options;\r\n  \r\n  const gameData = getPlayerGameDataExample(); //TODO: replace with real API call\r\n  \r\n  const calculatedStats = getGamesStats(gameData as Game[], playerId || 0, PlayerTeam || \"Riot\");\r\n  console.log(\"--HOOK-- calculatedStats:\", calculatedStats);\r\n\r\n  return { playerStats: calculatedStats, gameCount: gameData.length };\r\n}\r\n\r\nexport default usePagePlayerDetails;\r\n/*  type Filters = {\r\n    opponent?: string;\r\n    champion?: string;\r\n    competition?: string;\r\n  };\r\n\r\n  type State = {\r\n    filters: Filters;\r\n    filteredGames: Game[];\r\n    winrate: number;\r\n  };\r\n  type Action =\r\n    | { type: \"SET_GAMES\"; payload: Game[] }\r\n    | { type: \"SET_FILTERS\"; payload: Filters };\r\n*/\r\n"],"mappings":"AAAA;AACA,SAASA,wBAAwB,QAAQ,mCAAmC;AAG5E,SAASC,aAAa,QAAQ,uCAAuC;AAOrE;;AAEA,SAASC,oBAAoBA,CAC3BC,OAA2C,GAAG,CAAC,CAAC,EAIhD;EACA,MAAM;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGF,OAAO;EAExC,MAAMG,QAAQ,GAAGN,wBAAwB,CAAC,CAAC,CAAC,CAAC;;EAE7C,MAAMO,eAAe,GAAGN,aAAa,CAACK,QAAQ,EAAYF,QAAQ,IAAI,CAAC,EAAEC,UAAU,IAAI,MAAM,CAAC;EAC9FG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,eAAe,CAAC;EAEzD,OAAO;IAAEG,WAAW,EAAEH,eAAe;IAAEI,SAAS,EAAEL,QAAQ,CAACM;EAAO,CAAC;AACrE;AAEA,eAAeV,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}