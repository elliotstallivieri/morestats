{"ast":null,"code":"// turns an element from runes.json to a Rune object\n\nimport { RuneFamily } from \"../types/Rune\";\nimport runeList from \"../utils/runes.json\";\n\n// voir si vraiment nécessaire\n// laborieux à implémenter\n// remplacerait nameToRuneFamily\nfunction getRuneFamily(key) {\n  switch (key) {\n    case \"Press The Attack\":\n      return RuneFamily.Precision;\n    case \"\":\n      return RuneFamily.Domination;\n    case \"\":\n      return RuneFamily.Sorcery;\n    case \"\":\n      return RuneFamily.Resolve;\n    case \"\":\n      return RuneFamily.Inspiration;\n    default:\n      throw new Error(`Unknown rune family: ${key}`);\n  }\n}\nfunction nameToRuneFamily(name) {\n  switch (name) {\n    case \"Domination\":\n    case \"0\":\n      return RuneFamily.Domination;\n    case \"Inspiration\":\n    case \"1\":\n      return RuneFamily.Inspiration;\n    case \"Precision\":\n    case \"2\":\n      return RuneFamily.Precision;\n    case \"Resolve\":\n    case \"3\":\n      return RuneFamily.Resolve;\n    case \"Sorcery\":\n    case \"4\":\n      return RuneFamily.Sorcery;\n    default:\n      throw new Error(`Unknown rune family: ${name}`);\n  }\n}\n\n// return the position of the tree in the json file\nfunction treeNameToPosition(name) {\n  return 0;\n}\n\n// turns an element from runes.json to a Rune object\nfunction toRuneFormat(id, icon, name, slots, family) {\n  const formattedRune = {\n    id: id,\n    name: name,\n    icon: icon,\n    runeFamily: nameToRuneFamily(family),\n    slot: slots\n  };\n  return formattedRune;\n}\nexport { toRuneFormat };\nfunction toRunePack(tree) {\n  const treeFromJson = runeList[4]; // without \"as {...}\", variable would also have type number, causing error\n  let returnValue = [];\n  for (let i = 0; i < treeFromJson.slots.length; i++) {\n    let runeRow = [];\n    for (let j = 0; j < treeFromJson.slots[i].runes.length; j++) {\n      const rune = treeFromJson.slots[i].runes[j];\n      const formattedRune = toRuneFormat(rune.id, rune.icon, rune.name, i, treeFromJson.key);\n      runeRow.push(formattedRune);\n    }\n    returnValue.push(runeRow);\n  }\n  return returnValue;\n}\nexport { toRunePack };\n// export default toRuneFormat;","map":{"version":3,"names":["RuneFamily","runeList","getRuneFamily","key","Precision","Domination","Sorcery","Resolve","Inspiration","Error","nameToRuneFamily","name","treeNameToPosition","toRuneFormat","id","icon","slots","family","formattedRune","runeFamily","slot","toRunePack","tree","treeFromJson","returnValue","i","length","runeRow","j","runes","rune","push"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/utils/RuneFormatter.ts"],"sourcesContent":["// turns an element from runes.json to a Rune object\r\nimport { Rune } from \"../types/Rune\";\r\nimport { RuneFamily } from \"../types/Rune\";\r\nimport runeList from \"../utils/runes.json\";\r\n\r\n// voir si vraiment nécessaire\r\n// laborieux à implémenter\r\n// remplacerait nameToRuneFamily\r\nfunction getRuneFamily(key: string): RuneFamily {\r\n  switch (key) {\r\n    case \"Press The Attack\":\r\n      return RuneFamily.Precision;\r\n    case \"\":\r\n      return RuneFamily.Domination;\r\n    case \"\":\r\n      return RuneFamily.Sorcery;\r\n    case \"\":\r\n      return RuneFamily.Resolve;\r\n    case \"\":\r\n      return RuneFamily.Inspiration;\r\n    default:\r\n      throw new Error(`Unknown rune family: ${key}`);\r\n  }\r\n}\r\n\r\nfunction nameToRuneFamily(name: string): RuneFamily {\r\n  switch (name) {\r\n    case \"Domination\":\r\n    case \"0\":\r\n      return RuneFamily.Domination;\r\n    case \"Inspiration\":\r\n    case \"1\":\r\n      return RuneFamily.Inspiration;\r\n    case \"Precision\":\r\n    case \"2\":\r\n      return RuneFamily.Precision;\r\n    case \"Resolve\":\r\n    case \"3\":\r\n      return RuneFamily.Resolve;\r\n    case \"Sorcery\":\r\n    case \"4\":\r\n      return RuneFamily.Sorcery;\r\n    default:\r\n      throw new Error(`Unknown rune family: ${name}`);\r\n  }\r\n}\r\n\r\n// return the position of the tree in the json file\r\nfunction treeNameToPosition(name: string): number {\r\n  return 0;\r\n}\r\n\r\n// turns an element from runes.json to a Rune object\r\nfunction toRuneFormat(\r\n  id: number,\r\n  icon: string,\r\n  name: string,\r\n  slots: number,\r\n  family: string\r\n): Rune {\r\n  const formattedRune: Rune = {\r\n    id: id,\r\n    name: name,\r\n    icon: icon,\r\n    runeFamily: nameToRuneFamily(family),\r\n    slot: slots,\r\n  };\r\n  return formattedRune;\r\n}\r\n\r\nexport { toRuneFormat };\r\n\r\nfunction toRunePack(tree: keyof typeof runeList): Rune[][] {\r\n  const treeFromJson = runeList[4] as {\r\n    id: number;\r\n    key: string;\r\n    icon: string;\r\n    name: string;\r\n    slots: {\r\n      runes: {\r\n        id: number;\r\n        key: string;\r\n        icon: string;\r\n        name: string;\r\n        shortDesc: string;\r\n        longDesc: string;\r\n      }[];\r\n    }[];\r\n  }; // without \"as {...}\", variable would also have type number, causing error\r\n  let returnValue: Rune[][] = [];\r\n  for (let i = 0; i < treeFromJson.slots.length; i++) {\r\n    let runeRow: Rune[] = [];\r\n    for (let j = 0; j < treeFromJson.slots[i].runes.length; j++) {\r\n      const rune = treeFromJson.slots[i].runes[j];\r\n      const formattedRune = toRuneFormat(\r\n        rune.id,\r\n        rune.icon,\r\n        rune.name,\r\n        i,\r\n        treeFromJson.key\r\n      );\r\n      runeRow.push(formattedRune);\r\n    }\r\n    returnValue.push(runeRow);\r\n  }\r\n\r\n  return returnValue;\r\n}\r\n\r\nexport { toRunePack };\r\n// export default toRuneFormat;\r\n"],"mappings":"AAAA;;AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,OAAOC,QAAQ,MAAM,qBAAqB;;AAE1C;AACA;AACA;AACA,SAASC,aAAaA,CAACC,GAAW,EAAc;EAC9C,QAAQA,GAAG;IACT,KAAK,kBAAkB;MACrB,OAAOH,UAAU,CAACI,SAAS;IAC7B,KAAK,EAAE;MACL,OAAOJ,UAAU,CAACK,UAAU;IAC9B,KAAK,EAAE;MACL,OAAOL,UAAU,CAACM,OAAO;IAC3B,KAAK,EAAE;MACL,OAAON,UAAU,CAACO,OAAO;IAC3B,KAAK,EAAE;MACL,OAAOP,UAAU,CAACQ,WAAW;IAC/B;MACE,MAAM,IAAIC,KAAK,CAAC,wBAAwBN,GAAG,EAAE,CAAC;EAClD;AACF;AAEA,SAASO,gBAAgBA,CAACC,IAAY,EAAc;EAClD,QAAQA,IAAI;IACV,KAAK,YAAY;IACjB,KAAK,GAAG;MACN,OAAOX,UAAU,CAACK,UAAU;IAC9B,KAAK,aAAa;IAClB,KAAK,GAAG;MACN,OAAOL,UAAU,CAACQ,WAAW;IAC/B,KAAK,WAAW;IAChB,KAAK,GAAG;MACN,OAAOR,UAAU,CAACI,SAAS;IAC7B,KAAK,SAAS;IACd,KAAK,GAAG;MACN,OAAOJ,UAAU,CAACO,OAAO;IAC3B,KAAK,SAAS;IACd,KAAK,GAAG;MACN,OAAOP,UAAU,CAACM,OAAO;IAC3B;MACE,MAAM,IAAIG,KAAK,CAAC,wBAAwBE,IAAI,EAAE,CAAC;EACnD;AACF;;AAEA;AACA,SAASC,kBAAkBA,CAACD,IAAY,EAAU;EAChD,OAAO,CAAC;AACV;;AAEA;AACA,SAASE,YAAYA,CACnBC,EAAU,EACVC,IAAY,EACZJ,IAAY,EACZK,KAAa,EACbC,MAAc,EACR;EACN,MAAMC,aAAmB,GAAG;IAC1BJ,EAAE,EAAEA,EAAE;IACNH,IAAI,EAAEA,IAAI;IACVI,IAAI,EAAEA,IAAI;IACVI,UAAU,EAAET,gBAAgB,CAACO,MAAM,CAAC;IACpCG,IAAI,EAAEJ;EACR,CAAC;EACD,OAAOE,aAAa;AACtB;AAEA,SAASL,YAAY;AAErB,SAASQ,UAAUA,CAACC,IAA2B,EAAY;EACzD,MAAMC,YAAY,GAAGtB,QAAQ,CAAC,CAAC,CAe9B,CAAC,CAAC;EACH,IAAIuB,WAAqB,GAAG,EAAE;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,CAACP,KAAK,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAClD,IAAIE,OAAe,GAAG,EAAE;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,CAACP,KAAK,CAACS,CAAC,CAAC,CAACI,KAAK,CAACH,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC3D,MAAME,IAAI,GAAGP,YAAY,CAACP,KAAK,CAACS,CAAC,CAAC,CAACI,KAAK,CAACD,CAAC,CAAC;MAC3C,MAAMV,aAAa,GAAGL,YAAY,CAChCiB,IAAI,CAAChB,EAAE,EACPgB,IAAI,CAACf,IAAI,EACTe,IAAI,CAACnB,IAAI,EACTc,CAAC,EACDF,YAAY,CAACpB,GACf,CAAC;MACDwB,OAAO,CAACI,IAAI,CAACb,aAAa,CAAC;IAC7B;IACAM,WAAW,CAACO,IAAI,CAACJ,OAAO,CAAC;EAC3B;EAEA,OAAOH,WAAW;AACpB;AAEA,SAASH,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}