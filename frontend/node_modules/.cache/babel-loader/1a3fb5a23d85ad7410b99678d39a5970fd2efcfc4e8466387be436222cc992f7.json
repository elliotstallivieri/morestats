{"ast":null,"code":"export function getGamesStats(gameData) {\n  const gameCount = gameData.length;\n  console.log(\"gameCount:\", gameCount);\n  if (gameCount === 0) {\n    return [];\n  } else {\n    var gameStats;\n    /*  gameStats = {\r\n          id: 0,\r\n          date: \"\",\r\n          competition: \"\",\r\n          teamBlue: \"\",\r\n          teamRed: \"\",\r\n          winner: false,\r\n          patch: \"\",\r\n          gameDuration: 0,\r\n          champions: [[], []],\r\n          golDiff10: [],\r\n          golDiff15: [],\r\n          golDiff20: [],\r\n          golDiff25: [],\r\n          goldDiff30: [],\r\n          firstBlood: [0, 0],\r\n          firstTo6: [0, 0],\r\n          damageDealt: [[], []],\r\n          kda: [[], []],\r\n      };*/\n    for (let i = 0; i < gameCount; i++) {\n      const game = gameData[i];\n      // Here you would calculate the stats based on the game data\n      // For example, you could sum up the gold differences, count wins, etc.\n      // This is a placeholder for your actual logic\n      gameStats = game; // Replace with actual calculation logic\n    }\n    /* for (const metric in gameStats) {\r\n         // Here you would calculate the stats based on the metric\r\n         // For example, you could sum up the gold differences, count wins, etc.\r\n         // This is a placeholder for your actual logic\r\n         gameStats = metric; // Replace with actual calculation logic\r\n     }*/\n  }\n  return [];\n}","map":{"version":3,"names":["getGamesStats","gameData","gameCount","length","console","log","gameStats","i","game"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/utils/calculators/getGamesStats.ts"],"sourcesContent":["import { Game } from \"../../types/Game\";\r\n\r\nexport function getGamesStats(gameData: Game[]): Game[]{\r\n    const gameCount = gameData.length;\r\n    console.log(\"gameCount:\", gameCount);\r\n    if (gameCount === 0) {\r\n        return [];\r\n    }\r\n    else{\r\n        var gameStats: Game;\r\n      /*  gameStats = {\r\n            id: 0,\r\n            date: \"\",\r\n            competition: \"\",\r\n            teamBlue: \"\",\r\n            teamRed: \"\",\r\n            winner: false,\r\n            patch: \"\",\r\n            gameDuration: 0,\r\n            champions: [[], []],\r\n            golDiff10: [],\r\n            golDiff15: [],\r\n            golDiff20: [],\r\n            golDiff25: [],\r\n            goldDiff30: [],\r\n            firstBlood: [0, 0],\r\n            firstTo6: [0, 0],\r\n            damageDealt: [[], []],\r\n            kda: [[], []],\r\n        };*/\r\n        for (let i = 0; i < gameCount; i++) {\r\n            const game = gameData[i];\r\n            // Here you would calculate the stats based on the game data\r\n            // For example, you could sum up the gold differences, count wins, etc.\r\n            // This is a placeholder for your actual logic\r\n            gameStats = game; // Replace with actual calculation logic\r\n        }\r\n       /* for (const metric in gameStats) {\r\n            // Here you would calculate the stats based on the metric\r\n            // For example, you could sum up the gold differences, count wins, etc.\r\n            // This is a placeholder for your actual logic\r\n            gameStats = metric; // Replace with actual calculation logic\r\n        }*/\r\n    }\r\n    return [];\r\n}"],"mappings":"AAEA,OAAO,SAASA,aAAaA,CAACC,QAAgB,EAAS;EACnD,MAAMC,SAAS,GAAGD,QAAQ,CAACE,MAAM;EACjCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,SAAS,CAAC;EACpC,IAAIA,SAAS,KAAK,CAAC,EAAE;IACjB,OAAO,EAAE;EACb,CAAC,MACG;IACA,IAAII,SAAe;IACrB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;MAChC,MAAMC,IAAI,GAAGP,QAAQ,CAACM,CAAC,CAAC;MACxB;MACA;MACA;MACAD,SAAS,GAAGE,IAAI,CAAC,CAAC;IACtB;IACD;AACP;AACA;AACA;AACA;AACA;EACI;EACA,OAAO,EAAE;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}