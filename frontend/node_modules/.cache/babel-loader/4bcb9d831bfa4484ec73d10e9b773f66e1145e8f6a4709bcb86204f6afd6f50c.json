{"ast":null,"code":"export function getGamesStats(gameData, playerId, playerTeam) {\n  const gameCount = gameData.length;\n  //console.log(\"gameCount: \", gameCount);\n  if (gameCount === 0) {\n    return {}; // Return an empty object if no games are found\n  } else {\n    var gameStats = {\n      playerId: playerId,\n      playerName: \"\",\n      gameTotal: gameCount,\n      winTotal: 0,\n      blueSideTotal: 0,\n      blueSideWinTotal: 0,\n      kda: [0, 0, 0],\n      // [kills, deaths, assists]\n      totalGameDuration: 0,\n      // in seconds\n      winRate: 0,\n      // percentage\n      blueSidePlayRate: 0,\n      // percentage\n      averageGameDuration: 0,\n      // in seconds\n      averageKills: 0,\n      // average kills per game\n      averageDeaths: 0 // average deaths per game\n    };\n    // find the player's team \n    const playerTeam = gameData[0].teamBlue;\n    for (let i = 0; i < gameCount; i++) {\n      const game = gameData[i];\n      gameStats.gameTotal += 1;\n      gameStats.totalGameDuration += game.gameDuration;\n      gameStats.kda[0] += game.kda[0][0]; // kills\n      gameStats.kda[1] += game.kda[0][1]; // deaths\n    }\n    return gameStats;\n  }\n  return {}; // Return an empty object if no games are found\n}","map":{"version":3,"names":["getGamesStats","gameData","playerId","playerTeam","gameCount","length","gameStats","playerName","gameTotal","winTotal","blueSideTotal","blueSideWinTotal","kda","totalGameDuration","winRate","blueSidePlayRate","averageGameDuration","averageKills","averageDeaths","teamBlue","i","game","gameDuration"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/utils/calculators/getGamesStats.ts"],"sourcesContent":["import { Game } from \"../../types/Game\";\r\nimport { PlayerGameStats } from \"../../types/PlayerGameStats\";\r\n\r\nexport function getGamesStats(gameData: Game[], playerId: number, playerTeam: string): PlayerGameStats {\r\n  const gameCount = gameData.length;\r\n  //console.log(\"gameCount: \", gameCount);\r\n  if (gameCount === 0) {\r\n    return {} as PlayerGameStats; // Return an empty object if no games are found\r\n  } else {\r\n    var gameStats: PlayerGameStats = {\r\n      playerId: playerId, \r\n      playerName: \"\",\r\n      gameTotal: gameCount,\r\n      winTotal: 0,\r\n      blueSideTotal: 0,\r\n      blueSideWinTotal: 0,\r\n      kda: [0, 0, 0], // [kills, deaths, assists]\r\n      totalGameDuration: 0, // in seconds\r\n      winRate: 0, // percentage\r\n      blueSidePlayRate: 0, // percentage\r\n      averageGameDuration: 0, // in seconds\r\n      averageKills: 0, // average kills per game\r\n      averageDeaths: 0, // average deaths per game\r\n    };\r\n    // find the player's team \r\n    const playerTeam = gameData[0].teamBlue;\r\n\r\n    for (let i = 0; i < gameCount; i++) {\r\n      const game = gameData[i];\r\n      gameStats.gameTotal += 1;\r\n        gameStats.totalGameDuration += game.gameDuration;\r\n        gameStats.kda[0] += game.kda[0][0]; // kills\r\n        gameStats.kda[1] += game.kda[0][1]; // deaths\r\n\r\n    }\r\n    return gameStats;\r\n  }\r\n  return {} as PlayerGameStats; // Return an empty object if no games are found\r\n}\r\n"],"mappings":"AAGA,OAAO,SAASA,aAAaA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,UAAkB,EAAmB;EACrG,MAAMC,SAAS,GAAGH,QAAQ,CAACI,MAAM;EACjC;EACA,IAAID,SAAS,KAAK,CAAC,EAAE;IACnB,OAAO,CAAC,CAAC,CAAoB,CAAC;EAChC,CAAC,MAAM;IACL,IAAIE,SAA0B,GAAG;MAC/BJ,QAAQ,EAAEA,QAAQ;MAClBK,UAAU,EAAE,EAAE;MACdC,SAAS,EAAEJ,SAAS;MACpBK,QAAQ,EAAE,CAAC;MACXC,aAAa,EAAE,CAAC;MAChBC,gBAAgB,EAAE,CAAC;MACnBC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MAChBC,iBAAiB,EAAE,CAAC;MAAE;MACtBC,OAAO,EAAE,CAAC;MAAE;MACZC,gBAAgB,EAAE,CAAC;MAAE;MACrBC,mBAAmB,EAAE,CAAC;MAAE;MACxBC,YAAY,EAAE,CAAC;MAAE;MACjBC,aAAa,EAAE,CAAC,CAAE;IACpB,CAAC;IACD;IACA,MAAMf,UAAU,GAAGF,QAAQ,CAAC,CAAC,CAAC,CAACkB,QAAQ;IAEvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,SAAS,EAAEgB,CAAC,EAAE,EAAE;MAClC,MAAMC,IAAI,GAAGpB,QAAQ,CAACmB,CAAC,CAAC;MACxBd,SAAS,CAACE,SAAS,IAAI,CAAC;MACtBF,SAAS,CAACO,iBAAiB,IAAIQ,IAAI,CAACC,YAAY;MAChDhB,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIS,IAAI,CAACT,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpCN,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIS,IAAI,CAACT,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExC;IACA,OAAON,SAAS;EAClB;EACA,OAAO,CAAC,CAAC,CAAoB,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}