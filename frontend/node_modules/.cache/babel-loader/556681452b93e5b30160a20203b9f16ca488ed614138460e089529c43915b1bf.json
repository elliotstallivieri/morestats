{"ast":null,"code":"export function getGamesStats(gameData, playerId, playerTeam, playerPosition) {\n  const gameCount = gameData.length;\n  //console.log(\"gameCount: \", gameCount);\n  if (gameCount === 0) {\n    return {}; // Return an empty object if no games are found\n  } else {\n    var gameStats = {\n      playerId: playerId,\n      playerName: \"\",\n      gameTotal: gameCount,\n      winTotal: 0,\n      blueSideTotal: 0,\n      blueSideWinTotal: 0,\n      kda: [0, 0, 0],\n      // [kills, deaths, assists]\n      totalGameDuration: 0,\n      // in seconds\n\n      winRate: 0,\n      // percentage\n      blueSidePlayRate: 0,\n      // percentage\n      averageGameDuration: \"\",\n      // in seconds\n      averageKills: 0,\n      // average kills per game\n      averageDeaths: 0 // average deaths per game\n    };\n    // find the player's team\n    const playerTeamNumber = gameData[0].teamBlue === playerTeam ? 0 : 1;\n    for (let i = 0; i < gameCount; i++) {\n      const game = gameData[i];\n      gameStats.gameTotal += 1;\n      gameStats.totalGameDuration += game.gameDuration;\n      gameStats.kda[0] += game.kda[playerTeamNumber][playerPosition][0]; // kills\n      gameStats.kda[1] += game.kda[playerTeamNumber][playerPosition][1]; // deaths\n      gameStats.kda[2] += game.kda[playerTeamNumber][playerPosition][2]; // assists\n    }\n    gameStats.winRate = gameStats.winTotal / gameCount * 100;\n    gameStats.blueSidePlayRate = gameStats.blueSideTotal / gameCount * 100;\n    const averageGameDurationSeconds = gameStats.totalGameDuration / gameCount % 60;\n    const averageGameDurationMinutes = Math.round(gameStats.totalGameDuration / gameCount / 60);\n    gameStats.averageGameDuration = averageGameDurationMinutes.toString() + \":\" + averageGameDurationSeconds.toString(); // convert to minutes\n    console.log(\"averageGameDuration: \", gameStats.averageGameDuration);\n    return gameStats;\n  }\n}","map":{"version":3,"names":["getGamesStats","gameData","playerId","playerTeam","playerPosition","gameCount","length","gameStats","playerName","gameTotal","winTotal","blueSideTotal","blueSideWinTotal","kda","totalGameDuration","winRate","blueSidePlayRate","averageGameDuration","averageKills","averageDeaths","playerTeamNumber","teamBlue","i","game","gameDuration","averageGameDurationSeconds","averageGameDurationMinutes","Math","round","toString","console","log"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/utils/calculators/getGamesStats.ts"],"sourcesContent":["import { Game } from \"../../types/Game\";\r\nimport { PlayerGameStats } from \"../../types/PlayerGameStats\";\r\n\r\nexport function getGamesStats(\r\n  gameData: Game[],\r\n  playerId: number,\r\n  playerTeam: string,\r\n  playerPosition: number\r\n): PlayerGameStats {\r\n  const gameCount = gameData.length;\r\n  //console.log(\"gameCount: \", gameCount);\r\n  if (gameCount === 0) {\r\n    return {} as PlayerGameStats; // Return an empty object if no games are found\r\n  } else {\r\n    var gameStats: PlayerGameStats = {\r\n      playerId: playerId,\r\n      playerName: \"\",\r\n\r\n      gameTotal: gameCount,\r\n      winTotal: 0,\r\n      blueSideTotal: 0,\r\n      blueSideWinTotal: 0,\r\n      kda: [0, 0, 0], // [kills, deaths, assists]\r\n      totalGameDuration: 0, // in seconds\r\n\r\n      winRate: 0, // percentage\r\n      blueSidePlayRate: 0, // percentage\r\n      averageGameDuration:\"\", // in seconds\r\n      averageKills: 0, // average kills per game\r\n      averageDeaths: 0, // average deaths per game\r\n    };\r\n    // find the player's team\r\n    const playerTeamNumber = gameData[0].teamBlue === playerTeam ? 0 : 1;\r\n\r\n    for (let i = 0; i < gameCount; i++) {\r\n      const game = gameData[i];\r\n      gameStats.gameTotal += 1;\r\n      gameStats.totalGameDuration += game.gameDuration;\r\n      gameStats.kda[0] += game.kda[playerTeamNumber][playerPosition][0]; // kills\r\n      gameStats.kda[1] += game.kda[playerTeamNumber][playerPosition][1]; // deaths\r\n      gameStats.kda[2] += game.kda[playerTeamNumber][playerPosition][2]; // assists\r\n    }\r\n    gameStats.winRate = (gameStats.winTotal / gameCount) * 100;\r\n    gameStats.blueSidePlayRate = (gameStats.blueSideTotal / gameCount) * 100;\r\n    const averageGameDurationSeconds = (gameStats.totalGameDuration / gameCount)%60;\r\n    const averageGameDurationMinutes = Math.round((gameStats.totalGameDuration / gameCount)/60);\r\n    gameStats.averageGameDuration = averageGameDurationMinutes.toString() + \":\"+averageGameDurationSeconds.toString(); // convert to minutes\r\n    console.log(\"averageGameDuration: \", gameStats.averageGameDuration);\r\n    return gameStats;\r\n  }\r\n}\r\n"],"mappings":"AAGA,OAAO,SAASA,aAAaA,CAC3BC,QAAgB,EAChBC,QAAgB,EAChBC,UAAkB,EAClBC,cAAsB,EACL;EACjB,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAM;EACjC;EACA,IAAID,SAAS,KAAK,CAAC,EAAE;IACnB,OAAO,CAAC,CAAC,CAAoB,CAAC;EAChC,CAAC,MAAM;IACL,IAAIE,SAA0B,GAAG;MAC/BL,QAAQ,EAAEA,QAAQ;MAClBM,UAAU,EAAE,EAAE;MAEdC,SAAS,EAAEJ,SAAS;MACpBK,QAAQ,EAAE,CAAC;MACXC,aAAa,EAAE,CAAC;MAChBC,gBAAgB,EAAE,CAAC;MACnBC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MAChBC,iBAAiB,EAAE,CAAC;MAAE;;MAEtBC,OAAO,EAAE,CAAC;MAAE;MACZC,gBAAgB,EAAE,CAAC;MAAE;MACrBC,mBAAmB,EAAC,EAAE;MAAE;MACxBC,YAAY,EAAE,CAAC;MAAE;MACjBC,aAAa,EAAE,CAAC,CAAE;IACpB,CAAC;IACD;IACA,MAAMC,gBAAgB,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAACoB,QAAQ,KAAKlB,UAAU,GAAG,CAAC,GAAG,CAAC;IAEpE,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,SAAS,EAAEiB,CAAC,EAAE,EAAE;MAClC,MAAMC,IAAI,GAAGtB,QAAQ,CAACqB,CAAC,CAAC;MACxBf,SAAS,CAACE,SAAS,IAAI,CAAC;MACxBF,SAAS,CAACO,iBAAiB,IAAIS,IAAI,CAACC,YAAY;MAChDjB,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIU,IAAI,CAACV,GAAG,CAACO,gBAAgB,CAAC,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEG,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIU,IAAI,CAACV,GAAG,CAACO,gBAAgB,CAAC,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEG,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIU,IAAI,CAACV,GAAG,CAACO,gBAAgB,CAAC,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE;IACAG,SAAS,CAACQ,OAAO,GAAIR,SAAS,CAACG,QAAQ,GAAGL,SAAS,GAAI,GAAG;IAC1DE,SAAS,CAACS,gBAAgB,GAAIT,SAAS,CAACI,aAAa,GAAGN,SAAS,GAAI,GAAG;IACxE,MAAMoB,0BAA0B,GAAIlB,SAAS,CAACO,iBAAiB,GAAGT,SAAS,GAAE,EAAE;IAC/E,MAAMqB,0BAA0B,GAAGC,IAAI,CAACC,KAAK,CAAErB,SAAS,CAACO,iBAAiB,GAAGT,SAAS,GAAE,EAAE,CAAC;IAC3FE,SAAS,CAACU,mBAAmB,GAAGS,0BAA0B,CAACG,QAAQ,CAAC,CAAC,GAAG,GAAG,GAACJ,0BAA0B,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnHC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAExB,SAAS,CAACU,mBAAmB,CAAC;IACnE,OAAOV,SAAS;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}