{"ast":null,"code":"export function getGamesStats(gameData, playerId, playerTeam, playerPosition) {\n  const gameCount = gameData.length;\n  //console.log(\"gameCount: \", gameCount);\n  if (gameCount === 0) {\n    return {}; // Return an empty object if no games are found\n  } else {\n    let gameStats = {\n      playerId: playerId,\n      playerName: \"\",\n      gameTotal: gameCount,\n      winTotal: 0,\n      blueSideTotal: 0,\n      blueSideWinTotal: 0,\n      kda: [0, 0, 0],\n      // [kills, deaths, assists]\n      totalGameDuration: 0,\n      // in seconds\n      firstBloodTotal: 0,\n      // total first bloods taken by the player\n      perfectKDATotal: 0,\n      winRate: 0,\n      // percentage\n      blueSidePlayRate: 0,\n      // percentage\n      redSidePlayRate: 0,\n      // percentage\n      blueSideWinRate: 0,\n      // percentage\n      redSideWinRate: 0,\n      // percentage\n      averageGameDuration: \"\",\n      // in seconds\n      averageKills: 0,\n      // average kills per game\n      averageDeaths: 0,\n      // average deaths per game\n      damageShare: 0,\n      // average damage share per game\n      firstBloodRate: 0,\n      // percentage of games where the player got first blood\n      firstTo6Rate: 0,\n      // percentage of games where the player was the first to reach level 6\n      perfectKDARate: 0\n    };\n    // find the player's team\n    const playerTeamNumber = gameData[0].teamBlue === playerTeam ? 0 : 1;\n    let totalDamageShare = 0; // sum of all damage shares\n    for (let i = 0; i < gameCount; i++) {\n      const game = gameData[i];\n      if (game.winner === (playerTeamNumber === 0)) {\n        gameStats.winTotal += 1;\n        if (game.teamBlue === playerTeam) {\n          gameStats.blueSideTotal += 1;\n          if (game.winner === true) {\n            gameStats.blueSideWinTotal += 1;\n          }\n        }\n      }\n      gameStats.totalGameDuration += game.gameDuration;\n      gameStats.kda[0] += game.kda[playerTeamNumber][playerPosition][0]; // kills\n      gameStats.kda[1] += game.kda[playerTeamNumber][playerPosition][1]; // deaths\n      gameStats.kda[2] += game.kda[playerTeamNumber][playerPosition][2]; // assists\n      let teamDamage = 0;\n      for (let j = 0; j < 5; j++) {\n        teamDamage += game.damageDealt[playerTeamNumber][j];\n      }\n      totalDamageShare += game.damageDealt[playerTeamNumber][playerPosition] / teamDamage; // damage share\n      teamDamage = game.damageDealt[playerTeamNumber].reduce((sum, dmg) => sum + dmg, 0);\n    }\n    gameStats.winRate = Number((gameStats.winTotal / gameCount * 100).toFixed(2));\n    gameStats.blueSidePlayRate = Number((gameStats.blueSideTotal / gameCount * 100).toFixed(2));\n    gameStats.redSidePlayRate = Number((100 - gameStats.blueSidePlayRate).toFixed(2));\n    gameStats.blueSideWinRate = gameStats.blueSideTotal === 0 ? 0 : Number((gameStats.blueSideWinTotal / gameStats.blueSideTotal * 100).toFixed(2));\n    gameStats.damageShare = Number((totalDamageShare / gameCount * 100).toFixed(2)); // average damage share per game\n\n    // calculate average game duration and format it as \"MM:SS\"\n    const averageGameDurationSeconds = gameStats.totalGameDuration / gameCount % 60;\n    const averageGameDurationMinutes = Math.round(gameStats.totalGameDuration / gameCount / 60);\n    gameStats.averageGameDuration = averageGameDurationMinutes.toString() + \":\" + (averageGameDurationSeconds < 10 ? \"0\" : \"\") + averageGameDurationSeconds.toString();\n    console.log(\"averageGameDuration: \", gameStats.averageGameDuration);\n    return gameStats;\n  }\n}","map":{"version":3,"names":["getGamesStats","gameData","playerId","playerTeam","playerPosition","gameCount","length","gameStats","playerName","gameTotal","winTotal","blueSideTotal","blueSideWinTotal","kda","totalGameDuration","firstBloodTotal","perfectKDATotal","winRate","blueSidePlayRate","redSidePlayRate","blueSideWinRate","redSideWinRate","averageGameDuration","averageKills","averageDeaths","damageShare","firstBloodRate","firstTo6Rate","perfectKDARate","playerTeamNumber","teamBlue","totalDamageShare","i","game","winner","gameDuration","teamDamage","j","damageDealt","reduce","sum","dmg","Number","toFixed","averageGameDurationSeconds","averageGameDurationMinutes","Math","round","toString","console","log"],"sources":["C:/Users/loppo/Projets/morestats/frontend/src/utils/calculators/getGamesStats.ts"],"sourcesContent":["import { Game } from \"../../types/Game\";\r\nimport { PlayerGameStats } from \"../../types/PlayerGameStats\";\r\n\r\nexport function getGamesStats(\r\n  gameData: Game[],\r\n  playerId: number,\r\n  playerTeam: string,\r\n  playerPosition: number\r\n): PlayerGameStats {\r\n  const gameCount = gameData.length;\r\n  //console.log(\"gameCount: \", gameCount);\r\n  if (gameCount === 0) {\r\n    return {} as PlayerGameStats; // Return an empty object if no games are found\r\n  } else {\r\n    let gameStats: PlayerGameStats = {\r\n      playerId: playerId,\r\n      playerName: \"\",\r\n\r\n      gameTotal: gameCount,\r\n      winTotal: 0,\r\n      blueSideTotal: 0,\r\n      blueSideWinTotal: 0,\r\n      kda: [0, 0, 0], // [kills, deaths, assists]\r\n      totalGameDuration: 0, // in seconds\r\n      firstBloodTotal: 0, // total first bloods taken by the player\r\n      perfectKDATotal: 0,\r\n\r\n      winRate: 0, // percentage\r\n      blueSidePlayRate: 0, // percentage\r\n      redSidePlayRate: 0, // percentage\r\n      blueSideWinRate: 0, // percentage\r\n      redSideWinRate: 0, // percentage\r\n      averageGameDuration: \"\", // in seconds\r\n      averageKills: 0, // average kills per game\r\n      averageDeaths: 0, // average deaths per game\r\n      damageShare: 0, // average damage share per game\r\n      firstBloodRate: 0, // percentage of games where the player got first blood\r\n      firstTo6Rate: 0, // percentage of games where the player was the first to reach level 6\r\n      perfectKDARate: 0, \r\n    };\r\n    // find the player's team\r\n    const playerTeamNumber = gameData[0].teamBlue === playerTeam ? 0 : 1;\r\n    let totalDamageShare = 0; // sum of all damage shares\r\n    for (let i = 0; i < gameCount; i++) {\r\n      const game = gameData[i];\r\n      if (game.winner === (playerTeamNumber === 0)) {\r\n        gameStats.winTotal += 1;\r\n        if (game.teamBlue === playerTeam) {\r\n          gameStats.blueSideTotal += 1;\r\n          if (game.winner === true) {\r\n            gameStats.blueSideWinTotal += 1;\r\n          }\r\n        }\r\n      }\r\n      gameStats.totalGameDuration += game.gameDuration;\r\n      gameStats.kda[0] += game.kda[playerTeamNumber][playerPosition][0]; // kills\r\n      gameStats.kda[1] += game.kda[playerTeamNumber][playerPosition][1]; // deaths\r\n      gameStats.kda[2] += game.kda[playerTeamNumber][playerPosition][2]; // assists\r\n      let teamDamage = 0;\r\n      for (let j = 0; j < 5; j++) {\r\n        teamDamage += game.damageDealt[playerTeamNumber][j];\r\n      }\r\n      totalDamageShare +=\r\n        game.damageDealt[playerTeamNumber][playerPosition] / teamDamage; // damage share\r\n      teamDamage = game.damageDealt[playerTeamNumber].reduce(\r\n        (sum, dmg) => sum + dmg,\r\n        0\r\n      );\r\n    }\r\n\r\n    gameStats.winRate = Number(\r\n      ((gameStats.winTotal / gameCount) * 100).toFixed(2)\r\n    );\r\n    gameStats.blueSidePlayRate = Number(\r\n      ((gameStats.blueSideTotal / gameCount) * 100).toFixed(2)\r\n    );\r\n    gameStats.redSidePlayRate = Number(\r\n      (100 - gameStats.blueSidePlayRate).toFixed(2)\r\n    );\r\n    gameStats.blueSideWinRate =\r\n      gameStats.blueSideTotal === 0\r\n        ? 0\r\n        : Number(\r\n            (\r\n              (gameStats.blueSideWinTotal / gameStats.blueSideTotal) *\r\n              100\r\n            ).toFixed(2)\r\n          );\r\n    gameStats.damageShare = Number(\r\n      ((totalDamageShare / gameCount) * 100).toFixed(2)\r\n    ); // average damage share per game\r\n\r\n    // calculate average game duration and format it as \"MM:SS\"\r\n    const averageGameDurationSeconds =\r\n      (gameStats.totalGameDuration / gameCount) % 60;\r\n    const averageGameDurationMinutes = Math.round(\r\n      gameStats.totalGameDuration / gameCount / 60\r\n    );\r\n    gameStats.averageGameDuration =\r\n      averageGameDurationMinutes.toString() +\r\n      \":\" +\r\n      (averageGameDurationSeconds < 10 ? \"0\" : \"\") +\r\n      averageGameDurationSeconds.toString();\r\n    console.log(\"averageGameDuration: \", gameStats.averageGameDuration);\r\n    return gameStats;\r\n  }\r\n}\r\n"],"mappings":"AAGA,OAAO,SAASA,aAAaA,CAC3BC,QAAgB,EAChBC,QAAgB,EAChBC,UAAkB,EAClBC,cAAsB,EACL;EACjB,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAM;EACjC;EACA,IAAID,SAAS,KAAK,CAAC,EAAE;IACnB,OAAO,CAAC,CAAC,CAAoB,CAAC;EAChC,CAAC,MAAM;IACL,IAAIE,SAA0B,GAAG;MAC/BL,QAAQ,EAAEA,QAAQ;MAClBM,UAAU,EAAE,EAAE;MAEdC,SAAS,EAAEJ,SAAS;MACpBK,QAAQ,EAAE,CAAC;MACXC,aAAa,EAAE,CAAC;MAChBC,gBAAgB,EAAE,CAAC;MACnBC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MAChBC,iBAAiB,EAAE,CAAC;MAAE;MACtBC,eAAe,EAAE,CAAC;MAAE;MACpBC,eAAe,EAAE,CAAC;MAElBC,OAAO,EAAE,CAAC;MAAE;MACZC,gBAAgB,EAAE,CAAC;MAAE;MACrBC,eAAe,EAAE,CAAC;MAAE;MACpBC,eAAe,EAAE,CAAC;MAAE;MACpBC,cAAc,EAAE,CAAC;MAAE;MACnBC,mBAAmB,EAAE,EAAE;MAAE;MACzBC,YAAY,EAAE,CAAC;MAAE;MACjBC,aAAa,EAAE,CAAC;MAAE;MAClBC,WAAW,EAAE,CAAC;MAAE;MAChBC,cAAc,EAAE,CAAC;MAAE;MACnBC,YAAY,EAAE,CAAC;MAAE;MACjBC,cAAc,EAAE;IAClB,CAAC;IACD;IACA,MAAMC,gBAAgB,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC6B,QAAQ,KAAK3B,UAAU,GAAG,CAAC,GAAG,CAAC;IACpE,IAAI4B,gBAAgB,GAAG,CAAC,CAAC,CAAC;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,SAAS,EAAE2B,CAAC,EAAE,EAAE;MAClC,MAAMC,IAAI,GAAGhC,QAAQ,CAAC+B,CAAC,CAAC;MACxB,IAAIC,IAAI,CAACC,MAAM,MAAML,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC5CtB,SAAS,CAACG,QAAQ,IAAI,CAAC;QACvB,IAAIuB,IAAI,CAACH,QAAQ,KAAK3B,UAAU,EAAE;UAChCI,SAAS,CAACI,aAAa,IAAI,CAAC;UAC5B,IAAIsB,IAAI,CAACC,MAAM,KAAK,IAAI,EAAE;YACxB3B,SAAS,CAACK,gBAAgB,IAAI,CAAC;UACjC;QACF;MACF;MACAL,SAAS,CAACO,iBAAiB,IAAImB,IAAI,CAACE,YAAY;MAChD5B,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIoB,IAAI,CAACpB,GAAG,CAACgB,gBAAgB,CAAC,CAACzB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEG,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIoB,IAAI,CAACpB,GAAG,CAACgB,gBAAgB,CAAC,CAACzB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEG,SAAS,CAACM,GAAG,CAAC,CAAC,CAAC,IAAIoB,IAAI,CAACpB,GAAG,CAACgB,gBAAgB,CAAC,CAACzB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnE,IAAIgC,UAAU,GAAG,CAAC;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BD,UAAU,IAAIH,IAAI,CAACK,WAAW,CAACT,gBAAgB,CAAC,CAACQ,CAAC,CAAC;MACrD;MACAN,gBAAgB,IACdE,IAAI,CAACK,WAAW,CAACT,gBAAgB,CAAC,CAACzB,cAAc,CAAC,GAAGgC,UAAU,CAAC,CAAC;MACnEA,UAAU,GAAGH,IAAI,CAACK,WAAW,CAACT,gBAAgB,CAAC,CAACU,MAAM,CACpD,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EACvB,CACF,CAAC;IACH;IAEAlC,SAAS,CAACU,OAAO,GAAGyB,MAAM,CACxB,CAAEnC,SAAS,CAACG,QAAQ,GAAGL,SAAS,GAAI,GAAG,EAAEsC,OAAO,CAAC,CAAC,CACpD,CAAC;IACDpC,SAAS,CAACW,gBAAgB,GAAGwB,MAAM,CACjC,CAAEnC,SAAS,CAACI,aAAa,GAAGN,SAAS,GAAI,GAAG,EAAEsC,OAAO,CAAC,CAAC,CACzD,CAAC;IACDpC,SAAS,CAACY,eAAe,GAAGuB,MAAM,CAChC,CAAC,GAAG,GAAGnC,SAAS,CAACW,gBAAgB,EAAEyB,OAAO,CAAC,CAAC,CAC9C,CAAC;IACDpC,SAAS,CAACa,eAAe,GACvBb,SAAS,CAACI,aAAa,KAAK,CAAC,GACzB,CAAC,GACD+B,MAAM,CACJ,CACGnC,SAAS,CAACK,gBAAgB,GAAGL,SAAS,CAACI,aAAa,GACrD,GAAG,EACHgC,OAAO,CAAC,CAAC,CACb,CAAC;IACPpC,SAAS,CAACkB,WAAW,GAAGiB,MAAM,CAC5B,CAAEX,gBAAgB,GAAG1B,SAAS,GAAI,GAAG,EAAEsC,OAAO,CAAC,CAAC,CAClD,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,0BAA0B,GAC7BrC,SAAS,CAACO,iBAAiB,GAAGT,SAAS,GAAI,EAAE;IAChD,MAAMwC,0BAA0B,GAAGC,IAAI,CAACC,KAAK,CAC3CxC,SAAS,CAACO,iBAAiB,GAAGT,SAAS,GAAG,EAC5C,CAAC;IACDE,SAAS,CAACe,mBAAmB,GAC3BuB,0BAA0B,CAACG,QAAQ,CAAC,CAAC,GACrC,GAAG,IACFJ,0BAA0B,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,GAC5CA,0BAA0B,CAACI,QAAQ,CAAC,CAAC;IACvCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE3C,SAAS,CAACe,mBAAmB,CAAC;IACnE,OAAOf,SAAS;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}